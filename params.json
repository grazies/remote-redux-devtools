{
  "name": "Remote-redux-devtools",
  "tagline": "Redux DevTools remotely.",
  "body": "Remote Redux DevTools\r\n=====================\r\n\r\n![Demo](demo.gif)\r\n\r\nUse [Redux DevTools](https://github.com/gaearon/redux-devtools) remotely for React Native, hybrid, desktop and server side Redux apps.\r\n\r\n### Installation\r\n\r\n```\r\nnpm install --save-dev remote-redux-devtools\r\n```\r\n\r\n### Usage\r\n\r\nThere are 2 ways of usage depending if you're using other store enhancers (middlewares) or not.\r\n\r\n#### Add DevTools enhancer to your store\r\n\r\nIf you have a basic [store](http://redux.js.org/docs/api/createStore.html) as described in the official [redux-docs](http://redux.js.org/index.html), simply replace:\r\n  ```javascript\r\n  import { createStore } from 'redux';\r\n  const store = createStore(reducer);\r\n  ```\r\n  with\r\n  ```javascript\r\n  import { createStore } from 'redux';\r\n  import devToolsEnhancer from 'remote-redux-devtools';\r\n  const store = createStore(reducer, devToolsEnhancer());\r\n  // or const store = createStore(reducer, preloadedState, devToolsEnhancer());\r\n  ```\r\n  \r\n> Note: passing enhancer as last argument requires redux@>=3.1.0\r\n\r\n#### Use DevTools compose helper\r\n\r\n  If you setup your store with [middleware and enhancers](http://redux.js.org/docs/api/applyMiddleware.html), change this:\r\n  ```javascript\r\n  import { createStore, applyMiddleware, compose } from 'redux';\r\n  \r\n  const store = createStore(reducer, preloadedState, compose(\r\n    applyMiddleware(...middleware),\r\n    // other store enhancers if any\r\n  ));\r\n  ```\r\n  to:\r\n  ```javascript\r\n  import { createStore, applyMiddleware } from 'redux';\r\n  import { composeWithDevTools } from 'remote-redux-devtools';\r\n  \r\n  const store = createStore(reducer, /* preloadedState, */ composeWithDevTools(\r\n    applyMiddleware(...middleware),\r\n    // other store enhancers if any\r\n  ));\r\n  ```\r\n  or with devTools' options:\r\n  ```javascript\r\n  import { createStore, applyMiddleware } from 'redux';\r\n  import { composeWithDevTools } from 'remote-redux-devtools';\r\n  \r\n  const composeEnhancers = composeWithDevTools({ realtime: true, port: 8000 });\r\n  const store = createStore(reducer, /* preloadedState, */ composeEnhancers(\r\n    applyMiddleware(...middleware),\r\n    // other store enhancers if any\r\n  ));\r\n  ```\r\n\r\n#### Important\r\n\r\nIn order not to allow it in production by default, the enhancer will have effect only when `process.env.NODE_ENV === 'development'`. In case you don't set `NODE_ENV` or want to use it in production, set `realtime` parameter to `true`:\r\n\r\n  ```js\r\n  const store = createStore(reducer, devToolsEnhancer({ realtime: true }));\r\n  ```\r\n\r\n### Monitoring\r\n\r\nUse one of our monitor apps to inspect and dispatch actions:\r\n* [web](http://remotedev.io/local)\r\n* [redux-devtools-extension](https://github.com/zalmoxisus/redux-devtools-extension) - Click \"Remote\" button (or press [`Cmd+Ctrl+Arrow up`](https://github.com/zalmoxisus/redux-devtools-extension#keyboard-shortcuts)) to open remote monitoring.\r\n* [react-native-debugger](https://github.com/jhen0409/react-native-debugger) - Electron app, which already includes `remotedev-server`, `remotedev-app` and even React DevTools.\r\n* [chrome app](https://chrome.google.com/webstore/detail/remotedev/faicmgpfiaijcedapokpbdejaodbelph).\r\n* [remote-redux-devtools-on-debugger](https://github.com/jhen0409/remote-redux-devtools-on-debugger) - Used in React Native debugger as a dock monitor.\r\n* [atom-redux-devtools](https://github.com/zalmoxisus/atom-redux-devtools) - Used in Atom editor.\r\n* [redux-dispatch-cli](https://github.com/jhen0409/redux-dispatch-cli) - A CLI tool for Redux remote dispatch.\r\n\r\nUse [remotedev-app](https://github.com/zalmoxisus/remotedev-app) to create your own monitor app.\r\n\r\n### Communicate via local server\r\n\r\nIn order to make it simple to use, by default, the module and the monitor app communicate via [remotedev.io](http://remotedev.io) server. Use [remotedev-server](https://github.com/zalmoxisus/remotedev-server) cli to run it locally in order to make the connection faster and not to require an internet connection.\r\nYou can import it in your `server.js` script and start remotedev server together with your development server:\r\n```js\r\nvar remotedev = require('remotedev-server');\r\nremotedev({ hostname: 'localhost', port: 8000 });\r\n```\r\nSee [remotedev-server](https://github.com/zalmoxisus/remotedev-server) repository for more details.\r\nFor React Native you can use [react-native-debugger](https://github.com/jhen0409/react-native-debugger) or [remote-redux-devtools-on-debugger](https://github.com/jhen0409/remote-redux-devtools-on-debugger), which already include `remotedev-server`.\r\n\r\n\r\n### Parameters\r\n\r\nName                  | Description\r\n-------------         | -------------\r\n`name`                | *String* representing the instance name to be shown on the remote monitor.\r\n`realtime`            | *Boolean* specifies whether to allow remote monitoring. By default is `process.env.NODE_ENV === 'development'`. \r\n`hostname`            | *String* used to specify host for [`remotedev-server`](https://github.com/zalmoxisus/remotedev-server). If `port` is specified, default value is `localhost`.\r\n`port`                | *Number* used to specify host's port for [`remotedev-server`](https://github.com/zalmoxisus/remotedev-server).\r\n`secure`              | *Boolean* specifies whether to use `https` protocol for [`remotedev-server`](https://github.com/zalmoxisus/remotedev-server).\r\n`maxAge`              | *Number* of maximum allowed actions to be stored on the history tree, the oldest actions are removed once maxAge is reached. Default is `30`.\r\n`actionsBlacklist`    | *array* of actions to be hidden in DevTools. Overwrites corresponding global setting in the options page. See the example bellow.\r\n`actionsWhitelist`    | *array* of actions to be shown. All other actions will be hidden in DevTools.\r\n`actionSanitizer`     | *Function* which takes action object and id number as arguments, and should return action object back. See the example bellow.\r\n`stateSanitizer`      | *Function* which takes state object and index as arguments, and should return state object back. See the example bellow.\r\n`startOn`             | *String* or *Array of strings* indicating an action or a list of actions, which should start remote monitoring (when `realtime` is `false`). \r\n`stopOn`              | *String* or *Array of strings* indicating an action or a list of actions, which should stop remote monitoring. \r\n`sendOn`              | *String* or *Array of strings* indicating an action or a list of actions, which should trigger sending the history to the monitor (without starting it). *Note*: when using it, add a `fetch` polyfill if needed.\r\n`sendOnError`         | *Numeric* code: `0` - disabled (default), `1` - send all uncaught exception messages, `2` - send only reducers error messages.\r\n`sendTo`              | *String* url of the monitor to send the history when `sendOn` is triggered. By default is `${secure ? 'https' : 'http'}://${hostname}:${port}`.\r\n`actionCreators`      | *Array* or *Object* of action creators to dispatch remotely. See [the example](https://github.com/zalmoxisus/remote-redux-devtools/commit/b54652930dfd4e057991df8471c343957fd7bff7).\r\n`shouldHotReload`     | *Boolean* - if set to `false`, will not recompute the states on hot reloading (or on replacing the reducers). Default to `true`.\r\n `shouldRecordChanges`| *Boolean* - if specified as `false`, it will not record the changes till clicked on \"Start recording\" button on the monitor app. Default is `true`.\r\n `shouldStartLocked`  | *Boolean* - if specified as `true`, it will not allow any non-monitor actions to be dispatched till `lockChanges(false)` is dispatched. Default is `false`.\r\n`id`                  | *String* to identify the instance when sending the history triggered by `sendOn`. You can use, for example, user id here, to know who sent the data.\r\n\r\nAll parameters are optional. You have to provide at least `port` property to use `localhost` instead of `remotedev.io` server.\r\n\r\nExample:\r\n```js\r\nexport default function configureStore(preloadedState) {\r\n  const store = createStore(\r\n    reducer,\r\n    preloadedState,\r\n    devToolsEnhancer({\r\n      name: 'Android app', realtime: true,\r\n      hostname: 'localhost', port: 8000,\r\n      maxAge: 30, actionsBlacklist: ['EFFECT_RESOLVED'],\r\n      actionSanitizer: (action) => (\r\n       action.type === 'FILE_DOWNLOAD_SUCCESS' && action.data ?\r\n       { ...action, data: '<<LONG_BLOB>>' } : action\r\n      ),\r\n      stateSanitizer: (state) => state.data ? { ...state, data: '<<LONG_BLOB>>' } : state\r\n    })\r\n  );\r\n  return store;\r\n}\r\n```\r\n\r\n### Demo\r\n- [Toggle monitoring](http://zalmoxisus.github.io/monitoring/)\r\n\r\n### Examples\r\n- [Web](https://github.com/zalmoxisus/remote-redux-devtools/tree/master/examples)\r\n- [React Native](https://github.com/chentsulin/react-native-counter-ios-android)\r\n\r\n### License\r\n\r\nMIT\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}